name: Release workflow

on:
  release:
    types: [published, edited]

permissions:
  contents: write
  packages: write

jobs:
  get-app-name:
    runs-on: ubuntu-22.04
    name: Get App-Name
    outputs:
      app_name: ${{ steps.export-app-name.outputs.app_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get app-name
        id: export-app-name
        run: |
          NAME=$(cat ./app/AppManifest.json | jq -r '.name')
          echo "app_name=$NAME" >> $GITHUB_ENV

  upload-images:
    name: Upload Docker image
    runs-on: ubuntu-22.04
    needs: get-app-name
    env:
      APP_NAME: ${{ needs.get-app-name.outputs.app_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - id: get_version
        uses: battila7/get-version-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - id: github-repository-name-case-adjusted
        name: Prepare repository name in lower case for docker upload
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ github.repository }}

      - name: Wait for Multi-Arch build to succeed
        uses: fountainhead/action-wait-for-check@v1.2.0
        with:
          checkName: Merge Trivy results
          token: ${{ secrets.GITHUB_TOKEN }}
          timeoutSeconds: 1800
          intervalSeconds: 20

      - name: Download builds from Build multiarch image workflow artifacts
        uses: dawidd6/action-download-artifact@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: build-multiarch-image.yml
          workflow_conclusion: success
          commit: ${{ github.sha }}
          path: ${{ github.workspace }}

      - name: Publish release image to GHCR
        env:
          VAPP_IMAGE: ${{ env.APP_NAME }}-multiarch-oci-archive/${{ env.APP_NAME }}-oci-multiarch.tar
          VAPP_NAME: ${{ env.APP_NAME }}
          VAPP_VERSION: ${{ steps.get_version.outputs.version-without-v }}
          REGISTRY: "ghcr.io/${{ steps.github-repository-name-case-adjusted.outputs.lowercase }}"
        run: |
          tag=$(echo docker://$REGISTRY/$VAPP_NAME:$VAPP_VERSION | tr '[:upper:]' '[:lower:]')
          echo "Copy vApp image $VAPP_IMAGE to '$tag'"
          skopeo copy --all oci-archive:$VAPP_IMAGE "$tag"

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ${{ github.workspace }}/app/AppManifest.json
            ${{ github.workspace }}/binaries/*
            ${{ github.workspace }}/${{ env.APP_NAME }}-multiarch-docker-archive/*

  release-documentation:
    name: Generate release documentation
    runs-on: ubuntu-22.04
    needs: get-app-name
    env:
      APP_NAME: ${{ needs.get-app-name.outputs.app_name }}
      TEST_RESULT_FOLDER_NAME: test-results
    steps:
      - uses: actions/checkout@v4

      - name: Clone Release Documentation Action repository
        uses: actions/checkout@v4
        with:
          repository: eclipse-velocitas/release-documentation-action
          path: "./.github/actions"

      - uses: actions/setup-node@v4
        with:
          node-version: "18"
          check-latest: true

      - name: Conditional input event value
        uses: haya14busa/action-cond@v1
        id: condval
        with:
          cond: ${{ !github.event.inputs.name }}
          if_true: ${{ github.event.inputs.name }}
          if_false: ${{ github.sha }}

      - name: Wait for CI workflow to succeed
        uses: fountainhead/action-wait-for-check@v1.2.0
        with:
          checkName: Run Integration Tests (${{ env.APP_NAME }})
          token: ${{ secrets.GITHUB_TOKEN }}
          timeoutSeconds: 600
          intervalSeconds: 10

      - name: Download artifact from CI workflow
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: ci.yml
          workflow_conclusion: success
          commit: ${{ steps.condval.outputs.value }}
          path: .vehicleApp/Documentation/Inbox

      - name: Render documentation (test-results)
        uses: ./.github/actions/render
        with:
          inboxPath: .vehicleApp/Documentation/Inbox/test-results
          outboxPath: .vehicleApp/Documentation/Outbox
          templatePath: ./.github/actions/templates

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: "0.89.4"
          extended: true

      - name: Set tags output
        id: vars
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Check output
        env:
          RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
        run: |
          echo $RELEASE_VERSION
          echo ${{ steps.vars.outputs.tag }}

      - name: Create and Add reports to hugo static html site
        run: |
          hugo new site hugo

          cp ./README.md ./hugo/content/_index.md

          mkdir ./hugo/content/documentation
          mkdir ./hugo/content/reports

          cp ./README.md ./hugo/content/documentation/_index.md
          sed -i '1d' hugo/content/documentation/_index.md
          sed -i '1s/^/---\ntitle: "VehicleApp using python"\ndraft: false\n---\n/' hugo/content/documentation/_index.md

          cp .vehicleApp/Documentation/Outbox/* ./hugo/content/reports

          sed -i '1s/^/---\ntitle: "Code Coverage Test"\ndraft: false\n---\n/'  hugo/content/reports/CodeCoverage-*.md
          sed -i '1s/^/---\ntitle: "Unit Test Results"\ndraft: false\n---\n/'  hugo/content/reports/UnitTest-*.md
          cat hugo/content/reports/VulnerabilityScan-*.md >  hugo/content/reports/vulnerability-scan-results.md
          sed -i '1s/^/---\ntitle: "Vulnerability Scan Results"\ndraft: false\n---\n/'  hugo/content/reports/vulnerability-scan-results.md
          rm hugo/content/reports/VulnerabilityScan-*.md

          mkdir ./hugo/config
          mkdir ./hugo/config
